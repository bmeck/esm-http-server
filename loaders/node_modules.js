'use strict';
const URL = require('url').URL;
const http = require('http');
const concat = require('concat-stream');
const asyncConcat = async (stream) => {
  return {
    __proto__: null,
    then(f, r) {
      stream.pipe(concat(f));
      stream.on('error', r);
    }
  };
}
const asyncGET = async (url, destroy = true) => {
  return {
    __proto__: null,
    then(f, r) {
      http.get(url.href, (res) => {
        if (destroy) res.destroy();
        f(res);
      }).on('error', r);
    }
  };
};
const isOK = (res) => res.statusCode < 300 && res.statusCode >= 200;
const testExtensions = async (needle) => {
  for (const extension of ['', '.mjs', '.js', '.json', '.node']) {
    try {
      const possible = new URL(needle);
      possible.pathname += extension;
      const possible_res = await asyncGET(possible);
      if (isOK(possible_res)) {
        return possible;
      }
    } catch (e) {}
  }
  return null;
}
const search = (specifier, referrer, check_package_json = true) => {
  try {
    return new URL(specifier);
  } catch (e) {
    if (specifier.startsWith('/') ||
      specifier.startsWith('./') ||
      specifier.startsWith('../')) {
      return new URL(specifier, referrer);
    }
    let prev = referrer;
    let needle;
    do {
      {
        const exactURL = new URL(`./node_modules/${specifier}`, referrer);
        const search = await testExtensions(exactURL);
        if (search != null) {
          return search;
        }
      }
      {
        const packageURL = new URL(`./node_modules/${specifier}/package.json`, referrer);
        let res = await asyncGET(packageURL, false);
        if (isOK(res)) {
          let body = JSON.parse(`${await asyncConcat(res)}`);
          const hasMain = Object.getOwnPropertyDescriptor(body, 'main');
          if (hasMain) {
            let main = body.main;
            body = null;
            if (!specifier.startsWith('./') &&
              !specifier.startsWith('../')) {
              main = `./${main}`;
            }
            const found = search(main, new URL('../', packageURL));
            if (found !== null) return found;
          }
        }
        res.destroy();
      }
      {
        const indexURL = new URL(`./node_modules/${specifier}/index`, referrer);
        const search = await testExtensions(indexURL);
        if (search != null) {
          return search;
        }
      }
      referrer = new URL('../', referrer);
    } while (prev.href !== needle.href);
  }
  return null;
}
module.exports = class {
  async resolve(specifier, referrer) {
    console.error(`Node Loader resolving ${specifier} against ${referrer}`);
    const found = search(specifier, referrer);
    if (found !== null) return found;
    throw new Error('not found');
  }
};
